2-Day Virtual Training Seminar
Asynchronous and Parallel Programming in C#
Level: Intermediate

Dear Software Professional,

Asynchronous programming is a critical skill in C#, especially since so many of the built-in libraries are asynchronous -- including interactions with services and databases. On the server, asynchronous code can keep your servers free to handle more requests. In the desktop and mobile worlds, asynchronous code can keep the UI responsive. A subset of asynchronous programming is parallel programming. With parallel programming, you can run multiple operations at the same time -- speeding up processes and using resources more effectively. The ultimate goal is to give the best experience to your users.

But there are also pitfalls. If you do not handle asynchronous code correctly, you can create blocking operations that result in deadlocks, causing an application to hang indefinitely. You can also lose visibility to errors or cause performance issues. These are all things best avoided.

I am Jeremy Clark, and I have been working with C# and .NET since 2005, and for the last 10 years, I have been helping developers navigate the complex landscape of asynchronous programming using Task, await, and the Task Parallel Library. In those years I have seen the good and bad of asynchronous code, and I can show you how to use it effectively.

In this 2-day virtual seminar, you will get a deeper understanding of asynchronous and parallel programming, learn how to get those positive results, and see techniques to avoid the pitfalls. In addition to lectures with lots of sample code, you'll go hands-on with labs designed to make you comfortable with the topics.

To start with, we will compare using "await" with a Task and working with Task directly. We'll see that using "await" covers the 95% scenario -- meaning, most of the time we can use the syntactic shortcut that "await" offers us.

But sometimes we need to step out of the 95% scenario and take more direct control. That's why we'll also use Task with continuations (methods that run when a Task completes) and control how and when those continuations run.

We'll also look at cancellation, exception handling, and progress reporting. While exploring these topics, we'll look at things from the calling side (running asynchronous methods) as well as the target side (the asynchronous methods that are run). This will give you the full picture of running someone else's asynchronous methods as well as the best practices for writing your own.

We will also take a look at parallel programming -- a subset of asynchronous programming where we run multiple operations at the same time. We'll look at various techniques including using Tasks directly, using Channels, and using Parallel.ForEachAsync. Each approach has its pros and cons, and we'll look at specific features of each approach to determine which is best for a particular scenario.

When it comes to adding asynchronous code to an existing project, the real world is not always ideal. Sometimes we need to break asynchrony. Some common practices are to use Task.Result, GetAwaiter().GetResult(), Wait() or WaitAll(), or the JoinableTaskFactory. Although none of these is ideal, we will see the various downsides (some worse than others) so you can select a workable solution for your project.

Code samples use .NET 9, but we've got you covered whether you are maintaining code with .NET Framework 4.8 or writing new code with .NET 9. The good news is that most of the features are the same, but I'll be sure to point out where there are differences and what workarounds are available (often as easy as downloading a package).

Interspersed throughout the 2-day seminar, you'll go hands-on with labs designed take what you have learned and put it into practice.

At the end of the workshop, you will have a good understanding of asynchronous programming and can start using it more effectively in your own projects.

I hope that you'll consider joining me. I would love to see you there.

Jeremy Clark
